建造者模式
建造者模式(Builder Pattern) 使用多個簡單的物件一步一步構建成一個複雜的物件，這種類型的設計
模式屬於創建型模式，它提供了一種創建物件的最佳方式
一個Builder類會一步一步構造最終的物件，該Builder類是獨立於其他物件的
---------------------------------------------------------------------------------------------------------------------------------------
意圖 :
將一個複雜的構建與其表示相分離，使得同樣的構建過程可以創建不同的表示
-------------------------------------------------------------------------------------------------------------------------------
主要解決 :
主要解決在系統中，有時候面臨著一個複雜物件的創建工作，其通常由各個部分的子物件
用一定的算法構成，由於需求的變化，這個複雜物件的各個部分經常面臨著劇烈的變化，
但是將它們組合在一起的算法卻相對穩定
-------------------------------------------------------------------------------------------------------------------------------
何時使用 :
一些基本部件不會變，而其組合經常變化的時候
-------------------------------------------------------------------------------------------------------------------------------
如何實現Builder Design Pattern
1 、一般我們會在class內部放一個static nested class
2 、命名我們會在原本的class基礎後面加builder，比如Offer class我們變成了OfferBuilder class
3 、builder class 可以有所有argument 的 constructor 但是一般不直接用
4 、builder class 有各種setter返回builder這樣就可以chain，類似於StringBuilder.append
5 、最後會有一個build() method 我們可以返回生成的Object (不是返回builder)
6 、主class只有getter，outside改不了，builder class 裡有setter

優點 :
1 、 不用一次性傳入所有constructor argument ，因為有setter，名字好讀不會設置錯
2 、 optional parameter 就不需要每次設置null了，我們可以有default
缺點 :
1 、 為了增加可讀性，代碼多了
2 、 對於每一種不同的class，我們都需要創建一個分別的builder class
