工廠模式   --簡單工廠模式
工廠模式(Factory Pattern) 是Java中最常用的設計模式之一，這種類型的設計模式屬於創建型模式，
它提供了一種創建物件的最佳方式
在工廠模式中，我們在創建物件時不會對客戶端暴露創建邏輯，並且是通過使用一個共同的介面
來指向新創建的物件

 優點 :
 1 、 一個調用者想創建一個物件，只要知道其名稱就可以了
 2 、 擴展性高，如果想增加一個產品，只要擴展一個工廠類就好
 3 、遮蔽產品的具體實現，調用者只關心產品的介面
 缺點 :
 1 、 每次增加一個產品時，都需要增加一個具體類和物件實現工廠，使得系統中類的個數倍數增加，
 在一定程度上增加了系統複雜度，同時也增加了系統具體類的依賴

 注意事項 :
 作為一種創建類模式，在任何需要生成複雜對象的地方，都可以使用工廠方法模式，有一點需要注意
 的地方就是複雜物件適合使用工廠模式，而簡單物件，特別是只需要通過new 就可以完成創建的對象，
 無需使用工廠模式，如果使用工廠模式，就需要引入一個工廠類，會增加系統的複雜度

 使用場景 :
 1 、 日誌紀錄器 : 紀錄可能記錄到本地硬碟、系統事件、遠程服務器，用戶可以選擇紀錄日誌到什麼地方
 2 、 數據庫訪問，當用戶不知道最後系統採用哪一類數據庫，以及數據庫可能有變化時
 3 、 設計一個連接服務器的框架，需要3個協議，POP3、IMAP、HTTP，可以把這三個做為產品類
    共同實現一個介面

JDK 中的工廠設計模式實例
java.util.Calendar、ResourceBundle and NumberFormat getInstance()
valueOf()在包裝類中，如Boolean、Integer 也使用了工廠模式
--------------------------------------------------------------------------------------------------------------------------
策略模式和工廠模式的區別
相似點 :
在模式結構上，兩者很相似
-----------------------------------------------------------------------------------------------------------------
差異 :
1 、用途不一樣
工廠是創建型模式，它的作用就是創建物件
策略是行為模式，它的作用是讓一個物件在許多行為中選擇一種行為
2 、關注點不一樣
一個關注物件創建
一個關注行為的封裝
3 、解決不同的問題
工廠模式是創建型的設計模式，接受指令，創建出符合要求的實例，它主要解決的是資源的統一分發，
將物件的創建完全獨立出來，讓物件的創建和具體的使用客戶無關，主要應用在多數據庫選擇，
類庫文件加載等
策略模式是為了解決策略的切換與擴展，定義策略族，分別分裝起來，讓他們之間可以相互替換，
策略模式讓策略的變化獨立於使用策略的客戶
----------------------------------------------------------------------------------------------------------------------------------------------
舉例說明:
1 、工廠模式
有一天你決定去吃培根披薩，首先選擇店鋪，A店和B店都有培根披薩
你點了A店的培根披薩，過了20分鐘後，你的披薩就來了就可以吃到了，但這個披薩是怎麼做的，
到底麵粉放了多少、培根放了多少、有幾道工序，你是不需要館的，你需要的是一個美味的培根披薩
2 、 策略模式
在披薩店裡，你要一個培根披薩，老闆說有標準的PIZZA，也可以自己去做，原料有培根、麵粉、佐料
，工序有1、2、3工序，你自己去做吧，然後你就需要自己去做，到底放多少培根，到底放多少麵粉
，這都你自己決定，工序1、2、3，你是怎麼實現的，看你自己決定，最後得到了披薩
