策略模式
在策略模式(Strategy Pattern)中，一個類的行為或其算法可以在運行時更改，這種類型的設計
模式屬於行為型模式
在策略模型中，我們創建表示各種策略對物件和一個行為隨著策略對象改變而改變的context物件
的執行算法
意圖 :
定義一系列的算法，把它們一個個封裝起來，並且使它們可向戶替換
-------------------------------------------------------------------------------------------------------------------------------
主要解決 :
在有多種算法相似的情況下，使用if....else所帶來的複雜難以維護
-------------------------------------------------------------------------------------------------------------------------------
何時使用 :
一個系統有許多許多類，而區別它們的只是他們直接的行為
-------------------------------------------------------------------------------------------------------------------------------
如何解決 :
將這些算法封裝成一個一個的類，任意的替換
-------------------------------------------------------------------------------------------------------------------------------
關鍵代碼 :
實現同一個介面
-------------------------------------------------------------------------------------------------------------------------------
應用實例 :
1 、 諸葛亮的錦囊妙計，每一個錦囊就是一個策略
2 、 旅行的出遊方式，選擇騎自行車、做汽車等，每一種旅行方式都是一種策略
3 、 JAVA AWT 中的LayoutManager
-------------------------------------------------------------------------------------------------------------------------------
優點 :
1、 算法可以自由切換
2 、 避免使用多重條件判斷
3 、 擴展性良好
-------------------------------------------------------------------------------------------------------------------------------
缺點 :
1 、 策略類會增多
2  、 所有策略都需要對外暴露
-------------------------------------------------------------------------------------------------------------------------------
使用場景 :
1 、 如果在一個系統裡面有許多類，他們之間的區別在於它們的行為，那麼使用策略模式
可以動態地讓一個物件在許多行為中選擇一種行為
2 、 一個系統需要動態地在濟濟種算法中選擇一種
3 、 如果一個物件有很多的行為，如果不用恰當的模式，這些行為就只好使用多重的
條件選擇語句來實現
-------------------------------------------------------------------------------------------------------------------------------
注意事項 :
如果一個系統的策略多於四個，就需要考慮使用混合模式，解決策略類膨脹的問題