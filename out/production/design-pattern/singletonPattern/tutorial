單例模式
單例模式(Singleton Pattern) 是最簡單的設計模式之一，這類型的設計模式屬於創建型模式，
它提供了一種創建對象的最佳方法，這種模式涉及到一個單一的類，該類負責創建自己的對象，
同時確保只有單個對象被創建，這個類提供了一種訪問其唯一的對象的方式，可以直接訪問，
不需要實例化該類的對象。
注意 :
1 、單例類只能有一個實例
2 、單例類必須自己創建自己的唯一實例
3 、單例類必須給所有其他對象提供這一實例

意圖 : 保證一個類只有一個實例，並提供一個訪問他的static 方法
主要解決 : 頻繁創建與銷毀
何時使用 : 想控制實例數目，解省資源時
如何解決 : 判斷系統是否已經有這個單例，如果有則返回，如果沒有則創建。
關鍵代碼 : 建構子是private

優點 :
1 、在內存裡只有一個實例，減少了內存的開銷，尤其是頻繁的創建和銷毀實例
2 、避免對資源的多重佔用 (比如寫文件操作)
缺點 : 沒有介面，不能繼承，與單一職責衝突

使用場景 :
1 、要求生產唯一序列號
2 、web 中的計數器，不用每次刷新都在數據庫裡加一次，用單例先緩存起來
3 、創建的一個對象校消耗的資源較多，比如I/O與數據庫的連接等。

注意事項 :  getInstance() 方法中需要使用同步鎖 synchronized(Singleton.class) 防止多執行緒同時進入
造成instance被多次實例化
Examples
Logger Classes
Configuration Classes
Accesing resources in shared mode
Factories implemented as Singletons
